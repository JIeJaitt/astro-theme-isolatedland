---
const today = new Date();
const currentMonth = today.getMonth();
const currentYear = today.getFullYear();

function getDaysInMonth(year: number, month: number) {
    return new Date(year, month + 1, 0).getDate();
}

function getFirstDayOfMonth(year: number, month: number) {
    return new Date(year, month, 1).getDay();
}

// 获取上个月的天数
function getPrevMonthDays(year: number, month: number) {
    const prevMonth = month === 0 ? 11 : month - 1;
    const prevYear = month === 0 ? year - 1 : year;
    return getDaysInMonth(prevYear, prevMonth);
}

// 获取下个月信息
function getNextMonthInfo(year: number, month: number) {
    const nextMonth = month === 11 ? 0 : month + 1;
    const nextYear = month === 11 ? year + 1 : year;
    return { month: nextMonth, year: nextYear };
}

const daysInMonth = getDaysInMonth(currentYear, currentMonth);
const prevMonthDays = getPrevMonthDays(currentYear, currentMonth);
const firstDayOfMonth = getFirstDayOfMonth(currentYear, currentMonth);
const lastDay = (firstDayOfMonth + daysInMonth) % 7;
const nextDays = lastDay > 0 ? 7 - lastDay : 0;

const { month: nextMonth, year: nextYear } = getNextMonthInfo(
    currentYear,
    currentMonth,
);

const monthNames = [
    "一月",
    "二月",
    "三月",
    "四月",
    "五月",
    "六月",
    "七月",
    "八月",
    "九月",
    "十月",
    "十一月",
    "十二月",
];

const weekdayNames = ["日", "一", "二", "三", "四", "五", "六"];
---

<div class="calendar-widget">
    <div class="calendar-header">
        <div class="month-navigation">
            <button class="nav-btn prev-month">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <polyline points="15 18 9 12 15 6"></polyline>
                </svg>
            </button>
            <h3 class="current-month">
                {monthNames[currentMonth]}
                {currentYear}
            </h3>
            <button class="nav-btn next-month">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <polyline points="9 18 15 12 9 6"></polyline>
                </svg>
            </button>
        </div>
    </div>

    <div class="calendar-weekdays">
        {weekdayNames.map((day) => <div class="weekday">{day}</div>)}
    </div>

    <div class="calendar-days">
        {/* 上个月的日期 */}
        {
            Array(firstDayOfMonth)
                .fill(null)
                .map((_, i) => (
                    <div class="day prev-month-day">
                        {prevMonthDays - firstDayOfMonth + i + 1}
                    </div>
                ))
        }

        {/* 本月的日期 */}
        {
            Array(daysInMonth)
                .fill(null)
                .map((_, i) => {
                    const day = i + 1;
                    const isToday =
                        day === today.getDate() &&
                        currentMonth === today.getMonth() &&
                        currentYear === today.getFullYear();
                    const dateStr = `${currentYear}-${(currentMonth + 1).toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`;

                    return (
                        <div
                            class={`day ${isToday ? "today" : ""}`}
                            data-date={dateStr}
                        >
                            <span class="day-number">{day}</span>
                        </div>
                    );
                })
        }

        {/* 下个月的日期 */}
        {
            Array(nextDays)
                .fill(null)
                .map((_, i) => <div class="day next-month-day">{i + 1}</div>)
        }
    </div>

    <div class="todo-section">
        <div class="todo-header">
            <h4 class="selected-date"></h4>
        </div>

        <div class="todo-input-container">
            <input type="text" class="todo-input" placeholder="添加新任务..." />
            <button class="add-todo-btn">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
            </button>
        </div>

        <ul class="todo-list"></ul>
    </div>
</div>

<script>
    class CalendarApp {
        private currentDate: Date;
        private selectedDate: string | null = null;
        private calendarContainer: HTMLElement;
        private prevMonthBtn: HTMLElement;
        private nextMonthBtn: HTMLElement;
        private monthYearDisplay: HTMLElement;
        private daysContainer: HTMLElement;
        private todoSection: HTMLElement;
        private todoList: HTMLElement;
        private todoInput: HTMLInputElement;
        private addTodoBtn: HTMLElement;
        private selectedDateDisplay: HTMLElement;
        private days: NodeListOf<HTMLElement>;
        private todos: {
            [key: string]: { id: number; text: string; completed: boolean }[];
        } = {};

        constructor() {
            this.currentDate = new Date();
            this.initElements();
            this.loadTodos();
            this.renderCalendar();
            this.addEventListeners();
            this.updateTodoIndicators();

            // 默认显示今天的待办事项
            const todayStr = this.formatDate(new Date());
            this.showTodos(todayStr);

            // 为当前选中的日期添加选中样式
            const todayElem = this.daysContainer.querySelector(
                `[data-date="${todayStr}"]`,
            );
            if (todayElem) {
                todayElem.classList.add("selected");
            }
        }

        private initElements() {
            this.calendarContainer =
                document.querySelector(".calendar-widget")!;
            this.prevMonthBtn = document.querySelector(".prev-month")!;
            this.nextMonthBtn = document.querySelector(".next-month")!;
            this.monthYearDisplay = document.querySelector(".current-month")!;
            this.daysContainer = document.querySelector(".calendar-days")!;
            this.todoSection = document.querySelector(".todo-section")!;
            this.todoList = document.querySelector(".todo-list")!;
            this.todoInput = document.querySelector(
                ".todo-input",
            ) as HTMLInputElement;
            this.addTodoBtn = document.querySelector(".add-todo-btn")!;
            this.selectedDateDisplay =
                document.querySelector(".selected-date")!;
            this.days = document.querySelectorAll(
                ".day:not(.prev-month-day):not(.next-month-day)",
            );
        }

        private formatDate(date: Date): string {
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, "0");
            const day = date.getDate().toString().padStart(2, "0");
            return `${year}-${month}-${day}`;
        }

        private loadTodos() {
            const savedTodos = localStorage.getItem("calendar-todos");
            if (savedTodos) {
                this.todos = JSON.parse(savedTodos);
            }
        }

        private saveTodos() {
            localStorage.setItem("calendar-todos", JSON.stringify(this.todos));
            this.updateTodoIndicators();
        }

        private updateTodoIndicators() {
            // 清除所有日期的高亮状态
            this.days.forEach((day) => {
                day.classList.remove("has-todos");
            });

            // 标记有待办事项的日期
            for (const dateStr in this.todos) {
                if (this.todos[dateStr].length > 0) {
                    const dayElement = this.daysContainer.querySelector(
                        `[data-date="${dateStr}"]`,
                    );
                    if (dayElement) {
                        dayElement.classList.add("has-todos");
                    }
                }
            }
        }

        private renderCalendar() {
            const year = this.currentDate.getFullYear();
            const month = this.currentDate.getMonth();
            const monthNames = [
                "一月",
                "二月",
                "三月",
                "四月",
                "五月",
                "六月",
                "七月",
                "八月",
                "九月",
                "十月",
                "十一月",
                "十二月",
            ];

            // 更新月份和年份显示
            this.monthYearDisplay.textContent = `${monthNames[month]} ${year}`;

            this.updateTodoIndicators();
        }

        private addEventListeners() {
            // 上一个月按钮
            this.prevMonthBtn.addEventListener("click", () => {
                this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                this.renderCalendar();
            });

            // 下一个月按钮
            this.nextMonthBtn.addEventListener("click", () => {
                this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                this.renderCalendar();
            });

            // 点击日期显示待办事项
            this.daysContainer.addEventListener("click", (e) => {
                const target = e.target as HTMLElement;
                const day = target.closest(
                    ".day:not(.prev-month-day):not(.next-month-day)",
                ) as HTMLElement;

                if (day) {
                    this.days.forEach((d) => d.classList.remove("selected"));
                    day.classList.add("selected");

                    const dateStr = day.getAttribute("data-date");
                    if (dateStr) {
                        this.showTodos(dateStr);
                    }
                }
            });

            // 添加待办事项
            this.addTodoBtn.addEventListener("click", () => this.addTodo());
            this.todoInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    this.addTodo();
                }
            });

            // 待办事项列表的点击事件 - 确保可以点击多个部分
            this.todoList.addEventListener("click", (e) => {
                const target = e.target as HTMLElement;
                const todoItem = target.closest(".todo-item") as HTMLElement;

                if (!todoItem) return;

                const todoId = parseInt(
                    todoItem.getAttribute("data-id") || "0",
                );

                // 删除按钮点击
                if (target.classList.contains("delete-btn")) {
                    this.deleteTodo(todoId);
                    return;
                }

                // 点击复选框或其内部元素
                if (
                    target.classList.contains("todo-checkbox") ||
                    target.classList.contains("checkmark") ||
                    target.closest(".todo-checkbox")
                ) {
                    this.toggleTodo(todoId);
                    return;
                }
            });
        }

        private showTodos(dateStr: string) {
            this.selectedDate = dateStr;

            // 格式化日期显示
            const date = new Date(dateStr);
            const formattedDate = date.toLocaleDateString("zh-CN", {
                year: "numeric",
                month: "long",
                day: "numeric",
                weekday: "long",
            });

            this.selectedDateDisplay.textContent = formattedDate;
            this.renderTodos();
            this.todoSection.style.display = "block";
            this.todoInput.focus();
        }

        private renderTodos() {
            if (!this.selectedDate) return;

            const dateTodos = this.todos[this.selectedDate] || [];

            if (dateTodos.length === 0) {
                this.todoList.innerHTML =
                    '<li class="empty-todo">今天没有待办事项</li>';
                return;
            }

            this.todoList.innerHTML = dateTodos
                .map(
                    (todo) => `
                <li class="todo-item ${todo.completed ? "completed" : ""}" data-id="${todo.id}">
                    <input type="checkbox" class="todo-checkbox" ${todo.completed ? "checked" : ""}>
                    <span class="todo-text">${todo.completed ? `<del>${todo.text}</del>` : todo.text}</span>
                    <button class="delete-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="3 6 5 6 21 6"></polyline>
                            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                            <line x1="10" y1="11" x2="10" y2="17"></line>
                            <line x1="14" y1="11" x2="14" y2="17"></line>
                        </svg>
                    </button>
                </li>
            `,
                )
                .join("");
        }

        private addTodo() {
            if (!this.selectedDate) return;

            const text = this.todoInput.value.trim();
            if (!text) return;

            if (!this.todos[this.selectedDate]) {
                this.todos[this.selectedDate] = [];
            }

            const newTodo = {
                id: Date.now(),
                text,
                completed: false,
            };

            this.todos[this.selectedDate].push(newTodo);
            this.saveTodos();
            this.renderTodos();
            this.todoInput.value = "";
        }

        private toggleTodo(id: number) {
            if (!this.selectedDate) return;

            const dateTodos = this.todos[this.selectedDate] || [];
            const todo = dateTodos.find((t) => t.id === id);

            if (todo) {
                todo.completed = !todo.completed;
                this.saveTodos();
                this.renderTodos();
            }
        }

        private deleteTodo(id: number) {
            if (!this.selectedDate) return;

            const dateTodos = this.todos[this.selectedDate] || [];
            this.todos[this.selectedDate] = dateTodos.filter(
                (t) => t.id !== id,
            );

            this.saveTodos();
            this.renderTodos();
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        new CalendarApp();
    });
</script>

<style>
    /* 日历容器 */
    .calendar-widget {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        font-family:
            system-ui,
            -apple-system,
            "Segoe UI",
            Roboto,
            sans-serif;
        width: 100%;
        box-sizing: border-box;
    }

    /* 日历头部 */
    .calendar-header {
        padding: 16px;
        background: linear-gradient(90deg, #f8f9fa, #f1f3f5);
        border-bottom: 1px solid #e9ecef;
    }

    .month-navigation {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .current-month {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
        color: #343a40;
    }

    .nav-btn {
        background: white;
        border: 1px solid #dee2e6;
        width: 28px;
        height: 28px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .nav-btn:hover {
        background: #f1f3f5;
        border-color: #ced4da;
    }

    .nav-btn svg {
        color: #495057;
    }

    /* 星期栏 */
    .calendar-weekdays {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        background: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }

    .weekday {
        text-align: center;
        padding: 12px 0;
        font-size: 0.85rem;
        font-weight: 500;
        color: #868e96;
    }

    /* 日历日期 */
    .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
        padding: 8px;
        background: white;
    }

    .day {
        position: relative;
        aspect-ratio: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .day:hover {
        background: #f1f3f5;
    }

    .day.selected {
        background: #e7f5ff;
    }

    .day.today .day-number {
        background: var(--accent, #3b82f6);
        color: white;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* 有待办事项的日期显示光晕 */
    .day.has-todos {
        box-shadow: 0 0 0 4px rgba(173, 181, 189, 0.2);
    }

    .prev-month-day,
    .next-month-day {
        color: #adb5bd;
        opacity: 0.5;
    }

    .day-number {
        font-size: 0.9rem;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* 待办事项部分 */
    .todo-section {
        padding: 16px;
        border-top: 1px solid #e9ecef;
    }

    .todo-header {
        margin-bottom: 14px;
    }

    .selected-date {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: #343a40;
    }

    /* 待办输入组 - 修复宽度问题 */
    .todo-input-container {
        display: flex;
        gap: 6px;
        margin-bottom: 16px;
        width: 100%;
        box-sizing: border-box;
    }

    .todo-input {
        width: calc(100% - 38px); /* 计算宽度为容器宽度减去按钮宽度和间隙 */
        height: 32px;
        padding: 0 8px;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        font-size: 0.9rem;
        outline: none;
        transition: border-color 0.2s ease;
        box-sizing: border-box;
    }

    .todo-input:focus {
        border-color: var(--accent, #3b82f6);
    }

    .add-todo-btn {
        background: var(--accent, #3b82f6);
        color: white;
        border: none;
        width: 32px;
        height: 32px;
        min-width: 32px; /* 确保按钮不会被挤压 */
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background 0.2s ease;
        padding: 0;
    }

    .add-todo-btn:hover {
        background: #2563eb;
    }

    /* 待办列表 */
    .todo-list {
        list-style: none;
        padding: 0;
        margin: 0;
        max-height: 250px;
        overflow-y: auto;
    }

    .todo-item {
        display: flex;
        align-items: center;
        padding: 10px 5px;
        border-bottom: 1px solid #f1f3f5;
        width: 100%;
    }

    .empty-todo {
        text-align: center;
        color: #adb5bd;
        padding: 16px;
    }

    /* 使用真实的HTML复选框 */
    .todo-checkbox {
        margin: 0 8px 0 0;
        flex: 0 0 16px;
        width: 16px;
        height: 16px;
        cursor: pointer;
    }

    /* 待办事项文本 */
    .todo-text {
        flex: 1;
        font-size: 0.85rem;
        color: #343a40;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        padding-right: 5px;
    }

    .todo-item.completed .todo-text del {
        text-decoration: line-through;
        color: #adb5bd;
    }

    /* 删除按钮样式 - 进一步增强特异性 */
    .todo-item .delete-btn {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
        margin-left: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #adb5bd;
        transition: color 0.2s;
    }

    .todo-item .delete-btn:hover {
        color: #fa5252;
    }

    .todo-item .delete-btn svg {
        width: 16px;
        height: 16px;
    }

    /* 确保Flex布局正确应用 */
    .todo-list li.todo-item {
        display: flex;
        justify-content: space-between;
    }

    /* 响应式调整 */
    @media (max-width: 300px) {
        .todo-text {
            max-width: 100px;
        }
    }

    /* 删除按钮悬停样式 - 提高选择器特异性 */
    .todo-list .todo-item .delete-btn:hover {
        color: #fa5252 !important;
    }
</style>
